// Code generated by protoc-gen-go. DO NOT EDIT.
// source: new_peers_to_peer.proto

package protocols

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewPeersToPeer struct {
	Peers                []*NewPeersToPeer_Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NewPeersToPeer) Reset()         { *m = NewPeersToPeer{} }
func (m *NewPeersToPeer) String() string { return proto.CompactTextString(m) }
func (*NewPeersToPeer) ProtoMessage()    {}
func (*NewPeersToPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_new_peers_to_peer_4619bd938627fa0f, []int{0}
}
func (m *NewPeersToPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPeersToPeer.Unmarshal(m, b)
}
func (m *NewPeersToPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPeersToPeer.Marshal(b, m, deterministic)
}
func (dst *NewPeersToPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPeersToPeer.Merge(dst, src)
}
func (m *NewPeersToPeer) XXX_Size() int {
	return xxx_messageInfo_NewPeersToPeer.Size(m)
}
func (m *NewPeersToPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPeersToPeer.DiscardUnknown(m)
}

var xxx_messageInfo_NewPeersToPeer proto.InternalMessageInfo

func (m *NewPeersToPeer) GetPeers() []*NewPeersToPeer_Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type NewPeersToPeer_Peer struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Guid                 int64    `protobuf:"varint,3,opt,name=guid,proto3" json:"guid,omitempty"`
	Version              uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewPeersToPeer_Peer) Reset()         { *m = NewPeersToPeer_Peer{} }
func (m *NewPeersToPeer_Peer) String() string { return proto.CompactTextString(m) }
func (*NewPeersToPeer_Peer) ProtoMessage()    {}
func (*NewPeersToPeer_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_new_peers_to_peer_4619bd938627fa0f, []int{0, 0}
}
func (m *NewPeersToPeer_Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewPeersToPeer_Peer.Unmarshal(m, b)
}
func (m *NewPeersToPeer_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewPeersToPeer_Peer.Marshal(b, m, deterministic)
}
func (dst *NewPeersToPeer_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewPeersToPeer_Peer.Merge(dst, src)
}
func (m *NewPeersToPeer_Peer) XXX_Size() int {
	return xxx_messageInfo_NewPeersToPeer_Peer.Size(m)
}
func (m *NewPeersToPeer_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_NewPeersToPeer_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_NewPeersToPeer_Peer proto.InternalMessageInfo

func (m *NewPeersToPeer_Peer) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *NewPeersToPeer_Peer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NewPeersToPeer_Peer) GetGuid() int64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *NewPeersToPeer_Peer) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*NewPeersToPeer)(nil), "protocols.NewPeersToPeer")
	proto.RegisterType((*NewPeersToPeer_Peer)(nil), "protocols.NewPeersToPeer.Peer")
}

func init() {
	proto.RegisterFile("new_peers_to_peer.proto", fileDescriptor_new_peers_to_peer_4619bd938627fa0f)
}

var fileDescriptor_new_peers_to_peer_4619bd938627fa0f = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x4b, 0x2d, 0x8f,
	0x2f, 0x48, 0x4d, 0x2d, 0x2a, 0x8e, 0x2f, 0xc9, 0x07, 0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x38, 0x72, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x8b, 0x95, 0xe6, 0x33, 0x72, 0xf1, 0xf9,
	0xa5, 0x96, 0x07, 0x80, 0x14, 0x85, 0xe4, 0x83, 0x28, 0x21, 0x63, 0x2e, 0x56, 0xb0, 0x1e, 0x09,
	0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x59, 0x3d, 0x98, 0x62, 0x3d, 0x54, 0x85, 0x7a, 0x20, 0x22,
	0x08, 0xa2, 0x56, 0x2a, 0x82, 0x8b, 0x05, 0xac, 0x99, 0x8f, 0x8b, 0x29, 0xb3, 0x40, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x27, 0x88, 0x29, 0xb3, 0x40, 0x48, 0x88, 0x8b, 0xa5, 0x20, 0xbf, 0xa8, 0x44,
	0x82, 0x49, 0x81, 0x51, 0x83, 0x37, 0x08, 0xcc, 0x06, 0x89, 0xa5, 0x97, 0x66, 0xa6, 0x48, 0x30,
	0x2b, 0x30, 0x6a, 0x30, 0x07, 0x81, 0xd9, 0x42, 0x12, 0x5c, 0xec, 0x65, 0xa9, 0x45, 0xc5, 0x99,
	0xf9, 0x79, 0x12, 0x2c, 0x60, 0xa5, 0x30, 0x6e, 0x12, 0x1b, 0xd8, 0xc9, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x72, 0x0c, 0x51, 0xcd, 0x00, 0x00, 0x00,
}
